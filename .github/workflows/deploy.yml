name: CI/CD Pipeline for ORS Project

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ors-backend

jobs:
  # Job 1: Build and Push Docker Images (Skip separate builds)
  docker-build:
    runs-on: ubuntu-latest
    # needs: test  # Skip tests for faster deployment
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ORSProject10-UI/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('ORSProject10-UI/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('projectORS/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: rajatdhakad5/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: rajatdhakad5/ors-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./projectORS
        file: ./projectORS/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./ORSProject10-UI
        file: ./ORSProject10-UI/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 2: Deploy to DigitalOcean Droplet
  deploy:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: Setup server and install Docker if needed
      run: |
        # Setup server with Docker installation (with retry)
        for i in {1..3}; do
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "
          # Create main directory structure
          mkdir -p /opt/ors-app/{deployment,logs,ssl}
          chown -R root:root /opt/ors-app
          chmod 755 /opt/ors-app
          
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo '🐳 Installing Docker...'
            
            # Update package index
            apt-get update
            
            # Install required packages
            apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            
            # Add Docker GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            
            # Add Docker repository
            echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            # Update package index again
            apt-get update
            
            # Install Docker
            apt-get install -y docker-ce docker-ce-cli containerd.io
            
            # Install Docker Compose
            curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            # Start and enable Docker
            systemctl start docker
            systemctl enable docker
            
            echo '✅ Docker installation completed!'
          else
            echo '✅ Docker already installed'
          fi
          
          # Verify Docker installation
          docker --version
          docker-compose --version
          
          # Verify directories
          ls -la /opt/ors-app/
          echo '✅ Server setup completed!'
        "; then
            echo "✅ SSH connection successful on attempt $i"
            break
          else
            echo "⚠️ SSH connection failed on attempt $i/3"
            if [ $i -eq 3 ]; then
              echo "❌ All SSH attempts failed"
              exit 1
            fi
            echo "⏳ Waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
    - name: Deploy to DigitalOcean Droplet
      run: |
        # Add server to known hosts
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.DO_DROPLET_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
        
        # Copy docker-compose file to server
        scp -o ConnectTimeout=30 docker-compose.prod.yml root@${{ secrets.DO_DROPLET_IP }}:/opt/ors-app/docker-compose.yml
        
        # Create deployment directory and copy MySQL init script
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "mkdir -p /opt/ors-app/deployment"
        scp -o ConnectTimeout=30 deployment/mysql-init.sql root@${{ secrets.DO_DROPLET_IP }}:/opt/ors-app/deployment/mysql-init.sql
        
        # Create environment file
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "
          cd /opt/ors-app
          echo 'DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}' > .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_USERNAME=${{ secrets.DB_USERNAME }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
          echo 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' >> .env
          echo 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env
        "
        
        # Pull latest images (separate command)
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "cd /opt/ors-app && docker-compose pull"
        
        # Deploy containers (separate command)
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "
          cd /opt/ors-app
          docker-compose down
          docker-compose up -d
          echo '🚀 Containers started successfully!'
        "
        
        # Quick status check (separate command)
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 root@${{ secrets.DO_DROPLET_IP }} "
          cd /opt/ors-app
          docker-compose ps
          docker image prune -f
          echo '✅ Deployment completed!'
        "
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "🌐 Application URL: https://gitaction.project10.live"
          echo "📊 Backend Health: http://${{ secrets.DO_DROPLET_IP }}:8084/actuator/health"
        else
          echo "❌ Deployment failed!"
        fi
