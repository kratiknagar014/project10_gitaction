name: CI/CD Pipeline for ORS Project

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ors-backend

jobs:
  # Job 1: Build and Push Docker Images (Skip separate builds)
  docker-build:
    runs-on: ubuntu-latest
    # needs: test  # Skip tests for faster deployment
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ORSProject10-UI/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('ORSProject10-UI/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('projectORS/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./projectORS
        file: ./projectORS/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./ORSProject10-UI
        file: ./ORSProject10-UI/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 2: Deploy to DigitalOcean Droplet
  deploy:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        
    - name: Verify server connection
      run: |
        # Just verify server connection (docker-compose already exists on server)
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DO_DROPLET_IP }} "ls -la /opt/ors-app/"
        
    - name: Deploy to DigitalOcean Droplet
      run: |
        # Copy docker-compose file to server
        scp -o StrictHostKeyChecking=no docker-compose.prod.yml root@${{ secrets.DO_DROPLET_IP }}:/opt/ors-app/docker-compose.yml
        
        # Create deployment directory and basic init.sql on server
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DO_DROPLET_IP }} "mkdir -p /opt/ors-app/deployment && echo 'CREATE DATABASE IF NOT EXISTS project10_adv; USE project10_adv;' > /opt/ors-app/deployment/init.sql"
        
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DO_DROPLET_IP }} << 'EOF'
          cd /opt/ors-app
          
          # Create .env file with environment variables
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          
          # Pull latest images
          docker-compose pull
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check deployment status
          echo "Waiting for containers to start..."
          sleep 60
          
          echo "Container status:"
          docker-compose ps
          
          echo "Container logs (last 20 lines):"
          docker-compose logs --tail=20
          
          # Test application health with retry
          echo "Testing backend health (with retries)..."
          for i in {1..5}; do
            if curl -f http://localhost:8084/actuator/health; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              echo "‚è≥ Backend not ready, attempt $i/5, waiting 30s..."
              sleep 30
            fi
          done
          
          echo "Testing frontend health..."
          for i in {1..3}; do
            if curl -f http://localhost/; then
              echo "‚úÖ Frontend is healthy!"
              break
            else
              echo "‚è≥ Frontend not ready, attempt $i/3, waiting 15s..."
              sleep 15
            fi
          done
          
          echo "üöÄ Deployment completed - check logs above for any issues"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Application URL: http://${{ secrets.DO_DROPLET_IP }}"
          echo "üìä Backend Health: http://${{ secrets.DO_DROPLET_IP }}:8084/actuator/health"
        else
          echo "‚ùå Deployment failed!"
        fi
